
/*---------------------------------------------------------------------------------------------------------------------------------*/
//1.arr.includes(searchElement, fromIndex) 方法用来判断一个数组是否包含一个指定的值，如果是返回 true，否则false。
  // fromInde 可选。从该索引处开始查找 searchElement。如果为负值，则按升序从 array.length + fromIndex 的索引开始搜索。默认为 0。
  //如果fromIndex 大于等于数组长度 ，则返回 false
  //如果  array.length + fromIndex 仍为负值，则在整个数组中查找
[1, 2, 3].includes(2);     // true
[1, 2, 3].includes(4);     // false
[1, 2, 3].includes(3, 3);  // false
[1, 2, 3].includes(3, -1); // true
[1, 2, NaN].includes(NaN); // true
[1,2,3,{a:1,b:2}].includes({a:1,b:2}); //false

/*---------------------------------------------------------------------------------------------------------------------------------*/
//2.arr.indexOf(searchElement[, fromIndex = 0])
    //fromIndex 开始查找的位置。如果该索引值大于或等于数组长度，意味着不会在数组里查找，返回-1。
    //如果参数中提供的索引值是一个负值，则将其作为数组末尾的一个抵消，即-1表示从最后一个元素开始查找，-2表示从倒数第二个元素开始查找 ，以此类推。 
    //注意：如果参数中提供的索引值是一个负值，并不改变其查找顺序，查找顺序仍然是从前向后查询数组。如果抵消后的索引值仍小于0，则整个数组都将会被查询。
    //其默认值为0.
[1, 2, 3].indexOf(2);     // 1
[1, 2, 3].indexOf(4);     // -1
[1, 2, 3].indexOf(3, 3);  // -1
[1, 2, 3].indexOf(3, -1); // 2
[1, 2, NaN].indexOf(NaN); // -1
[1, 2, undefined].indexOf(undefined); // 2
[1,2,3,{a:1,b:2}].indexOf({a:1,b:2}); //-1

/*---------------------------------------------------------------------------------------------------------------------------------*/
//3.arr.lastIndexOf(searchElement[, fromIndex = arr.length])
    //fromIndex 开始查找的位置。如果该索引值大于或等于数组长度，意味着从arr.length开始查找。
    //如果参数中提供的索引值是一个负值，则从fromIndex + arr.length的地方开始往前查找。
    //如果参数中提供的索引值是一个负值，并且fromIndex + arr.length仍为负值的话，则返回-1
[2, 5, 9, 2].lastIndexOf(2);     // 3
[2, 5, 9, 2].lastIndexOf(7);     // -1
[2, 5, 9, 2].lastIndexOf(2, 3);  // 3
[2, 5, 9, 2].lastIndexOf(2, 2);  // 0
[2, 5, 9, 2].lastIndexOf(2, -2); // 0
[2, 5, 9, 2].lastIndexOf(2, -1); // 3

/*---------------------------------------------------------------------------------------------------------------------------------*/
//4.find() 方法返回数组中满足提供的测试函数的第一个元素的值。否则返回 undefined
var arr1 = [1,2,3,4,5]
var found = arr1.find(function(element, index, array) {
  return element > 3;
});
console.log(found); //4

/*---------------------------------------------------------------------------------------------------------------------------------*/
//5.findIndex() 方法返回传入一个测试条件（函数）符合条件的数组第一个元素位置。如果没有符合条件的元素返回 -1
/*---------------------------------------------------------------------------------------------------------------------------------*/
var arr2 = [1,2,3,4,5]
var found = arr2.findIndex(function(element, index, array) {
  return element > 3;
});
console.log(found); //3

/*---------------------------------------------------------------------------------------------------------------------------------*/

/*---------------------------------------------------------------------------------------------------------------------------------*/

/*---------------------------------------------------------------------------------------------------------------------------------*/