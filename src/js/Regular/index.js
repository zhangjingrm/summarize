//文档地址 https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions

/*------------------------------------------------------------------------------------------*/
//1.简单模式
var regx = /abc/;
regx.test('sdabcsd'); //true
regx.test('sdacsd') //false


/*------------------------------------------------------------------------------------------*/
//2.特殊字符*  *表示前面一项出现了零个或者多个
var regx1 = /ab*c/;
regx1.test('abbbbbbc'); //true


/*------------------------------------------------------------------------------------------*/
//3.特殊字符\  在非特殊字符之前的反斜杠表示下一个字符是特殊的，不能从字面上解释。反斜杠也可以将其后的特殊字符，转义为字面量。
var regx2 = /a*/;
var regx3 = /a\*/;
regx2.test('aaa'); //true
regx3.test('aaa'); //false


/*------------------------------------------------------------------------------------------*/
//4.^  匹配输入的开始。如果多行标志被设置为true，那么也匹配换行符后紧跟的位置。
var regx4 = /^A/;
regx4.test('an A'); //false
regx4.test('An E'); //true


/*------------------------------------------------------------------------------------------*/
//5.$  匹配输入的结束。如果多行标示被设置为true，那么也匹配换行符前的位置。
var regx5 = /t$/;
regx5.test('eater'); //false
regx5.test('eat'); //true


/*------------------------------------------------------------------------------------------*/
//6.+  匹配前面一个表达式1次或者多次。
var regx6 = /ca+/;
regx6.test('caaaadv'); //true
regx6.test('cbbbb'); //false


/*------------------------------------------------------------------------------------------*/
//7.?  匹配前面一个表达式0次或者1次。如果紧跟在任何量词 *、 +、? 或 {} 的后面，将会使量词变为非贪婪的（匹配尽量少的字符
var regx7 = /e?le?/;
regx7.test('angel'); //true
regx7.test('angle'); //true
regx7.test('oslo'); //true


/*------------------------------------------------------------------------------------------*/
//8.（小数点）匹配除换行符之外的任何单个字符。.ar，表示: 任意字符后面跟着一个字母 a， 再后面跟着一个字母 r。
var regx8 = /.b/;
regx8.test('Apple is ab'); //true
regx8.test('bApple is a'); //false


/*------------------------------------------------------------------------------------------*/
//9.匹配QQ号码（规则：5-15位，全是数字，第一位不能是0）
    //第一位是[1-9],后面是[0-9]
var regx9 = /^[1-9]{1}[0-9]{4,14}$/;


/*------------------------------------------------------------------------------------------*/
//10.匹配中文
var regx10 = /^[\u4E00-\u9FFF]$/;
regx10.test('123'); //false


/*------------------------------------------------------------------------------------------*/
//11.验证手机号码（前三位）
  //13-|17-|14(5,6)|15(0,1,2,3,5,6,7,8,9)|16(4)|18-
var regx11 = /^13[0,9]|17[0,9]|14[5|6]|15[0|1|2|3|5|6|7|8|9]|164|18[0|9]\d{8}$/;


/*------------------------------------------------------------------------------------------*/
//12.验证手机号码（前两位）
  //13-14-15-17-18
var regx12 = /^1[3|4|5|6|7]\d{9}$/;
var regx12 = /^1[34578]\d{9}$/;


/*------------------------------------------------------------------------------------------*/
//13. []字符集也称为字符类。方括号被用于指定字符集。使用字符集内的连字符来指定字符范围。方括号内的字符范围的顺序并不重要。
   // 例如正则表达式 [Tt]he，表示: 大写 T 或小写 t ，后跟字母 h，再后跟字母 e。
   //然而，字符集中的英文句号表示它字面的含义。正则表达式 ar[.]，表示小写字母 a，后面跟着一个字母 r，再后面跟着一个英文句号 . 字符。


/*------------------------------------------------------------------------------------------*/
//14. ?= 正向先行断言
 //正向先行断言认为第一部分的表达式必须是先行断言表达式。返回的匹配结果仅包含与第一部分表达式匹配的文本。 
 //要在一个括号内定义一个正向先行断言，在括号中问号和等号是这样使用的 (?=...)。先行断言表达式写在括号中的等号后面。 
 //例如正则表达式 (T|t)he(?=\sfat)，表示: 匹配大写字母 T 或小写字母 t，后面跟字母 h，后跟字母 e。 
 //在括号中，我们定义了正向先行断言，它会引导正则表达式引擎匹配 The 或 the 后面跟着 fat。
var regx14 = /(T|t)he(?=\sfat)/;
regx14.test('The fat cat sat on the mat.'); //true


/*------------------------------------------------------------------------------------------*/
//15. ?! 负向先行断言
var regx15 = /(T|t)he(?!\sfat)/; //从输入字符串中获取全部 The 或者 the 且不匹配 fat 前面加上一个空格字符。
'The fat cat sat on the mat.' => 匹配the


/*------------------------------------------------------------------------------------------*/
//16. ?<=  正向后行断言 
var regx16 = /(?<=(T|t)he\s)(fat|mat)/; //从输入字符串中获取在单词 The 或 the 之后的所有 fat 和 mat 单词。
'The fat cat sat on the mat.' => 匹配fat和mat



/*------------------------------------------------------------------------------------------*/
//17. ?<! 负向后行断言
var regx17 = /(?<!(T|t)he\s)(cat)/; //在输入字符中获取所有不在 The 或 the 之后的所有单词 cat。
'The cat sat on cat.' => 匹配cat


/*------------------------------------------------------------------------------------------*/
//18. 标记(修饰符)
 //i 不区分大小写: 将匹配设置为不区分大小写。
 //g 全局搜索: 搜索整个输入字符串中的所有匹配。
 //m 多行匹配: 会匹配输入字符串每一行。



/*------------------------------------------------------------------------------------------*/
//19.常用的正则表达式
var regx19 = /^[1-9]+$/; //正整数
var regx19 = /^-[1-9]+$/; //负整数
var regx19 = /^-?\d+$/; //整数
var regx19 = //; //
var regx19 = //; //
var regx19 = //; //
var regx19 = //; //
var regx19 = //; //
var regx19 = //; //
var regx19 = //; //
var regx19 = //; //
var regx19 = //; //
var regx19 = //; //























