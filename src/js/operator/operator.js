//赋值运算符，简单来讲，就是将它右边操作数的值赋给它左边的操作数
var operand;
operand = 12;
console.log(operand); //12

//加法赋值   x += y  =>  x = x + y  operator/add_assignment.js

//减法赋值   x -= y  =>  x = x - y  operator/sub_assignment.js


//乘法赋值   x *= y  =>  x = x * y
//只适用于Number(或者是可以转化为数字的字符串, 或者是Boolean)，其他类型的值会返回NaN，和减法的规则类似

//除法赋值   x /= y  =>  x = x / y
//只适用于Number(或者是可以转化为数字的字符串, 或者是Boolean)，其他类型的值会返回NaN，和减法的规则类似
//y为0或者false时，返回Infinity

//求余赋值   x %= y  =>  x = x % y
//只适用于Number(或者是可以转化为数字的字符串, 或者是Boolean)，其他类型的值会返回NaN，和减法的规则类似
//其中1%false => NaN  false%1 => 0

//求幂赋值   x **= y  =>  x = x ** y
//x，y是number或者是可以转为数字的字符串,
//x,y有一个为其他类型的时候都会返回NaN

//左移位赋值   x <<= y  =>  x = x << y
//会将x转化为二进制，然后向左移y位，右边用0填充，再转为十进制
//如果x为Object, Array, 不可转为数字的字符串，会返回0
//Boolean true->1 false->0
//如果x为数字，y为Array, Object, 不可转为数字的字符串, 会返回x
//y < 32, 超出范围的话，直接返回x

//右移位余赋值   x >>= y  =>  x = x >> y
//将 x 的二进制表示向右移 y (< 32) 位，丢弃被移出的位


//无符号右移位赋值   x >>>= y  =>  x = x >>> y
//将 x 的二进制表示向右移 y (< 32) 位，丢弃被移出的位，并使用 0 在左侧填充


//按位与赋值   x &= y  =>  x = x & y
//只有x, y都是1时，结果才是1
//非0，1的数字，会转为二进制，然后二进制的每位，按照0，1的组合进行计算
// 1001
// 1110
// 1000(返回的结果)
//将任一数值 x 与 0 执行按位与操作，其结果都为 0。将任一数值 x 与 -1 执行按位与操作，其结果都为 x


//按位异或赋值   x ^= y  =>  x = x ^ y
//x,y不同时，返回1，相同时返回0
// 1001
// 1110
// 0111(返回的结果)
//将任一数值 x 与 0 进行异或操作，其结果为 x。将任一数值 x 与 -1 进行异或操作，其结果为 ~x

//按位或赋值   x |= y  =>  x = x | y
//只有x, y都是0时，结果才是0
// 1001
// 1110
// 1111(返回的结果)
// 将任一数值 x 与 0 进行按位或操作，其结果都是 x。将任一数值 x 与 -1 进行按位或操作，其结果都为 -1


//按位非～
// 0->1 1->0
//  00000000000000000000000000001001 (9)
//->11111111111111111111111111110110(-9)
// 1111(返回的结果)
// 将任一数值 x 与 0 进行按位或操作，其结果都是 x。将任一数值 x 与 -1 进行按位或操作，其结果都为 -1


//解构赋值 deconstruction_assignment.js


//比较运算符 comparison_operator.js

//算数运算符 arithmetic_operator.js

//其他运算符 other_operator.js
//（条件运算符，逗号操作符，一元操作符-delete、typeof、void，关系操作符，instanceof）



